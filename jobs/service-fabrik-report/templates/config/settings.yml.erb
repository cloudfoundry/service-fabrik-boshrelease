<%
  def ostruct_to_hash(os)
    os.marshal_dump.map do |key, value|
      { key => value.is_a?(OpenStruct) ? ostruct_to_hash(value) : value }
    end.reduce(&:merge)
  end

  broker_name = link("broker").p('name')
  log_path = "/var/vcap/sys/log/service-fabrik-report/service-fabrik-report.log"
  external = link("broker").p('external')
  internal = link("broker").p('internal')
  report = p('report')
%>---
production:
  ####################
  # GENERAL SETTINGS #
  ####################
  username: '<%= link("broker").p('username') %>'
  password: '<%= link("broker").p('password') %>'
  broker_name: '<%= broker_name %>'
  enable_service_fabrik_v2: <%= link("broker").p('enable_service_fabrik_v2') %>
  skip_ssl_validation: <%= link("broker").p('skip_ssl_validation') %>
  session_store:
    path: <%= "/var/vcap/store/#{broker_name}/session" %>
  log_path: <%= log_path %>
  enable_circuit_breaker: <%= link("broker").p('enable_circuit_breaker') %>
  http_timeout: <%= link("broker").p('http_timeout') %>
  broker_drain_message: <%= link("broker").p('broker_drain_message') %>
  ##############################
  # EXTERNAL ENDPOINT SETTINGS #
  ##############################
  external:
    protocol: 'https'
    host: <%= external['host'] %>
    cookie_secure: true
    session_expiry: <%= external['session_expiry'] %>

  ##############################
  # INTERNAL ENDPOINT SETTINGS #
  ##############################
  internal:
    host: <%= "#{internal['ip']}:#{internal['port']}" %>
    <% link("broker").if_p('internal.ssl') do |ssl| %>
    protocol: 'https'
    ssl: <%= JSON.dump(ssl) %>
    <% end.else do %>
    protocol: 'http'
    <% end %>
  ##############################
  # REPORT ENDPOINT SETTINGS #
  ##############################
  report:
    log_event: <%= p('report.log_event') %>
    event_type: SF.REPORT
    port: <%= report['port'] %>
    ip: <%= report['ip'] %>
    host: <%= "#{report['ip']}:#{report['port']}" %>
    <% if_p('report.ssl') do |ssl| %>
    protocol: 'https'
    ssl: <%= JSON.dump(ssl) %>
    <% end.else do %>
    protocol: 'http'
    <% end %>
  
  ##############################
  # APISERVER SETTINGS #
  ##############################
  apiserver:
    ip: <%= link("service-fabrik-apiserver").p('ip') %>
    port: <%= link("service-fabrik-apiserver").p('port') %>
    ca: <%= JSON.dump(link("service-fabrik-apiserver").p('tls.apiserver.ca')) %>
    certificate: <%= JSON.dump(link("service-fabrik-apiserver").p('tls.apiserver.certificate')) %>
    private_key: <%= JSON.dump(link("service-fabrik-apiserver").p('tls.apiserver.private_key')) %>
    crds: <%= JSON.dump(link("service-fabrik-apiserver").p('crds')) %>
    getConfigInCluster: false
    pathToKubeConfig: "/var/vcap/jobs/service-fabrik-apiserver/config/kubeconfig"

  ###################
  # QUOTA MANAGEMENT SETTINGS #
  ###################
  quota: <%= JSON.dump(link("broker").p('quota', nil)) %>

  #######################
  # MONITORING SETTINGS #
  #######################
  monitoring:
    success_state: 'ok'
    success_metric: 0
    failure_state: 'critical'
    failure_metric: 1
    warning_state: 'warning'
    inprogress_state: 'in progress'
    inprogress_metric: 2
    event_name_prefix: <%= link("broker").p('riemann.prefix') %>.<%= name %>.<%= index %>.<%= spec.deployment %>
    include_response_body: <%= link("broker").p('monitoring.include_response_body') %>
    events_logged_in_db: <%= link("broker").p('monitoring.events_logged_in_db') %>
    unauthorized:
      http_status: [401,403]
      event_name: 'unauthorized_access'
      description: 'Unauthorized access to service attempted'
      tags: ['security', 'unauthorized']
      include_response_body: <%= link("broker").p('monitoring.unauthorized.include_response_body') %>
  riemann:
    enabled: <%= link("broker").p('riemann.enabled') %>
    host: <%= link("broker").p('riemann.host') %>
    port: <%= link("broker").p('riemann.port') %>
    protocol : tcp
    show_errors: <%= link("broker").p('riemann.show_errors') %>
    prefix: <%= link("broker").p('riemann.prefix') %>
    log_additional_event: <%= link("broker").p('riemann.log_additional_event') %>
    http_status_codes_to_be_skipped: <% link("broker").p('riemann.http_status_codes_to_be_skipped').each do |code| %>
    - <%= code %><% end %>
  ###################
  # BACKUP SETTINGS #
  ###################
  backup:
    retention_period_in_days: <%= link("broker").p('backup.retention_period_in_days') %>
    max_num_on_demand_backup: <%= link("broker").p('backup.max_num_on_demand_backup') %>
    status_check_every: <%= link("broker").p('backup.status_check_every') %>
    retry_delay_on_error: <%= link("broker").p('backup.retry_delay_on_error') %>
    lock_check_delay_on_restart: <%= link("broker").p('backup.lock_check_delay_on_restart') %>
    backup_restore_status_poller_timeout: <%= link("broker").p('backup.backup_restore_status_poller_timeout') %>
    backup_restore_status_check_every: <%= link("broker").p('backup.backup_restore_status_check_every') %>
    abort_time_out: <%= link("broker").p('backup.abort_time_out') %>
    consecutive_backup_failure_sla_count: <%= link("broker").p('backup.consecutive_backup_failure_sla_count') %>
    num_of_allowed_restores: <%= link("broker").p('backup.num_of_allowed_restores') %>
    restore_history_days: <%= link("broker").p('backup.restore_history_days') %>
    reschedule_backup_delay_after_restore: <%= link("broker").p('backup.reschedule_backup_delay_after_restore') %>
    transaction_logs_delete_buffer_time: <%= link("broker").p('backup.transaction_logs_delete_buffer_time') %>
    provider: <%= JSON.dump(link("broker").p('backup.provider', nil)) %>

  ######################
  # SCHEDULER SETTINGS #
  ######################
  scheduler:
    system_jobs:
    - name: 'service-fabrik-mongodb'
      type: 'ScheduledOobDeploymentBackup'
      interval: <%= link("broker").p('mongodb.backup.schedule_interval') %> #Backup schedule interval for service fabrik DB
      job_data:
        type: 'online'
        trigger: 'scheduled'
        deployment_name: <%= link("broker").p('mongodb.deployment_name') %>
        container: <%= link("broker").p('mongodb.agent.provider.container') %>
    - name: 'Backup_Reaper'
      type: 'BackupReaper'
      interval: <%= link("scheduler").p('system_jobs.backup_reaper.interval') %> #Schedule interval for backup reaper job
      job_data:
        delete_delay: <%= link("scheduler").p('system_jobs.backup_reaper.job_data.delete_delay') %>
    - name: 'DbCollection_Reaper'
      type: 'DbCollectionReaper'
      interval:  <%= link("scheduler").p('system_jobs.dbcollection_reaper.interval') %> #Schedule interval for DB Collection reaper job
      job_data:
        reap_collections:
          - name : JobRunDetail
            retention_in_days:  <%= link("scheduler").p('system_jobs.dbcollection_reaper.jobrun_detail.retention_in_days') %>
          - name : EventDetail
            retention_in_days: <%= link("scheduler").p('system_jobs.dbcollection_reaper.event_detail.retention_in_days') %>
      enabled: true

  ####################
  # MONGODB SETTINGS #
  ####################
  mongodb:
    <% link("broker").if_p('mongodb.url') do |mongodb_url| %>
    url: <%= mongodb_url %>
    <% end %>
    <% link("broker").if_p('mongodb.provision.plan_id') do |mongodb_plan_id| %>
    provision:
      plan_id: <%= mongodb_plan_id %>
      network_index: <%= link("broker").p('mongodb.provision.network_index') %>
    <% end %>
    # Choice of integrating mongodb is either via an already provisioned mongo instance by specifying the URL OR
    # by specifying the plan id from service catalog, which fabrik will provision automatically and start using
    deployment_name: <%= link("broker").p('mongodb.deployment_name') %>
    retry_connect:
      max_attempt: <%= link("broker").p('mongodb.retry_connect.max_attempt') %>
      min_delay: <%= link("broker").p('mongodb.retry_connect.min_delay') %>
    record_max_fetch_count: <%= link("broker").p('mongodb.record_max_fetch_count') %>  # Max number of records that can be fetched at a time
    backup:
      schedule_interval: <%= link("broker").p('mongodb.backup.schedule_interval') %>
    agent:
      provider:
        container: <%= link("broker").p('mongodb.agent.provider.container') %>
  #########################
  # CLOUDFOUNDRY SETTINGS #
  #########################
  cf:
    url: <%= link("broker").p('cf.url') %>
    username: <%= link("broker").p('cf.username') %>
    password: <%= link("broker").p('cf.password') %>
    <% link("broker").if_p('cf.identity_provider') do |identity_provider| %>
    identity_provider: <%= identity_provider %>
    <% end %>

  #####################
  # DIRECTOR SETTINGS #
  #####################
  directors: <%= JSON.dump(link("broker").p('directors')) %>
  ####################
  # SERVICES CATALOG #
  ####################
  services: <%= JSON.pretty_generate(link("broker").p('services')) %>
