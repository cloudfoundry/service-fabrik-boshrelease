
#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'docker' 'lvmvd'

create_loop() {
    # test whether volume is already set up
    name=$(losetup -a | grep "${LVMVD_LOOP_DEVICE}" | awk '{print $3}')
    if [ "X$name" = "X" ]; then
        losetup ${LVMVD_LOOP_DEVICE} ${LVMVD_PV_SPARSE_FILE}
    fi

    if vgdisplay | grep -q "${LVMVD_VOLUME_GROUP_NAME}"; then
       vgchange -ay ${LVMVD_VOLUME_GROUP_NAME}
    fi
}

retry_delete_loop() {
  local i=0
  local tries=5
  local delay=2
  while [ true ]
  do
      set +e
      delete_loop
      if ! losetup -a | grep -F ${LVMVD_LOOP_DEVICE} &> /dev/null; then
        # If 'delete_loop' was successful, the while-loop can be stopped
        echo "$(date) delete_loop was successful"
        break
      fi

      # Otherwise (if the 'delete_loop' call above has failed), this block will be executed
      echo "[RETRY DELETE_LOOP #$i]"
      losetup -a # should not contain /dev/loop1: ... (/var/vcap/store/lvmvd/service-vg.img); if it isn't continue with the next lines
      lsof $LVMVD_PV_SPARSE_FILE
      fuser $LVMVD_PV_SPARSE_FILE
      ps aux
      set -e

      i=$[$i+1]
      if [ $i -gt $tries ]; then
        exit 1
      fi
      sleep $[$delay**$i]
  done
}

delete_loop() {
    local mounted_volumes=$(mount | grep "${LVMVD_MOUNT_DIR}" | awk '{print $3}')
    for vol in $mounted_volumes; do
        echo "$(date) Unmounting volume $vol"
        umount $vol
    done
    vgchange -an ${LVMVD_VOLUME_GROUP_NAME}
    losetup -d ${LVMVD_LOOP_DEVICE}
}

# Create physical volume based on loop device (in case it does not exist)
#
create_volume() {
    # only do this if the file which holds the logcial volumes
    # does not exist
    if [ ! -f ${LVMVD_PV_SPARSE_FILE} ]; then
        truncate -s ${LVMVD_PV_SIZE}g ${LVMVD_PV_SPARSE_FILE}
        create_loop
        pvcreate ${LVMVD_LOOP_DEVICE}
        vgcreate ${LVMVD_VOLUME_GROUP_NAME} ${LVMVD_LOOP_DEVICE}
        #delete_loop
        retry_delete_loop
    fi
}

case $1 in

  start)
    pid_guard ${LVMVD_PID_FILE} ${JOB_NAME}

    # Install debian packages
    
    # We install the debian packages while starting the process and not during the
    # packaging phase because during the installation of the packages some necessary
    # prerequesits are done we do not want to reimplement in the bosh release.
    # DON'T CHANGE THE ORDER OF THE PACKAGE NAMES

    LVM2_PACKAGE_PATH=/var/vcap/packages/lvm2
    set +e
    if [[ `lsb_release -cs` == "xenial" ]]; then

            echo "$(date) Installing Xenial packages for lvm2"

            if ! dpkg -s libdevmapper-event1.02.1 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package libdevmapper-event1.02.1"
	      set -e
              dpkg -i $LVM2_PACKAGE_PATH/libdevmapper-event1.02.1_2_1.02.110-1ubuntu10_amd64.deb
	      set +e
            fi

            # the  package liblvm2cmd2.02 and dmeventd (package in below if) have cyclic dependency
            # just unpack the packages  and configure them after unpacking both packages
            if ! dpkg -s liblvm2cmd2.02 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package liblvm2cmd2.02"
	      set -e
              dpkg --unpack $LVM2_PACKAGE_PATH/liblvm2cmd2.02_2.02.133-1ubuntu10_amd64.deb
	      set +e
            fi

            if ! dpkg -s dmeventd > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package dmeventd"
	      set -e
              dpkg --unpack $LVM2_PACKAGE_PATH/dmeventd_2_1.02.110-1ubuntu10_amd64.deb

              # Now configure both liblvm2cmd2.02 and dmeventd which have cyclic dependency
              dpkg --configure liblvm2cmd2.02 dmeventd
	      set +e
            fi

            if ! dpkg -s liblvm2app2.2 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package liblvm2app2.2"
	      set -e
              dpkg -i $LVM2_PACKAGE_PATH/liblvm2app2.2_2.02.133-1ubuntu10_amd64.deb
	      set +e
            fi

            if ! dpkg -s lvm2 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package lvm2"
	      set -e
              dpkg -i $LVM2_PACKAGE_PATH/lvm2_2.02.133-1ubuntu10_amd64.deb
	      set +e

            fi

           #lvmetad is new caching mechanism in lvm2, observed few problems with it hence disabling 
           /etc/init.d/lvm2 stop
           sed -i 's/use_lvmetad = 1/use_lvmetad = 0/g' /etc/lvm/lvm.conf
           /etc/init.d/lvm2 start

    elif [[ `lsb_release -cs` == "bionic" ]]; then

            echo "$(date) Installing bionic packages for lvm2"

            if ! dpkg -s libdevmapper-event1.02.1 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package libdevmapper-event1.02.1"
	      set -e
              dpkg -i $LVM2_PACKAGE_PATH/libdevmapper-event1.02.1_1.02.145-4.1ubuntu3_amd64.deb
	      set +e
            fi

            # the  package liblvm2cmd2.02 and dmeventd (package in below if) have cyclic dependency
            # just unpack the packages  and configure them after unpacking both packages
            if ! dpkg -s liblvm2cmd2.02 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package liblvm2cmd2.02"
	      set -e
              dpkg --unpack $LVM2_PACKAGE_PATH/liblvm2cmd2.02_2.02.176-4.1ubuntu3_amd64.deb
	      set +e
            fi

            if ! dpkg -s dmeventd > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package dmeventd"
	      set -e
              dpkg --unpack $LVM2_PACKAGE_PATH/dmeventd_1.02.145-4.1ubuntu3_amd64.deb

              # Now configure both liblvm2cmd2.02 and dmeventd which have cyclic dependency
              dpkg --configure liblvm2cmd2.02 dmeventd
	      set +e
            fi

            if ! dpkg -s liblvm2app2.2 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package liblvm2app2.2"
	      set -e
              dpkg -i $LVM2_PACKAGE_PATH/liblvm2app2.2_2.02.176-4.1ubuntu3_amd64.deb
	      set +e
            fi

            if ! dpkg -s lvm2 > /dev/null 2>&1 ; then
              echo "$(date) Installing debian package lvm2"
	      set -e
              dpkg -i $LVM2_PACKAGE_PATH/lvm2_2.02.176-4.1ubuntu3_amd64.deb
	      set +e

            fi

           #lvmetad is new caching mechanism in lvm2, observed few problems with it hence disabling 
           /etc/init.d/lvm2 stop
           sed -i 's/use_lvmetad = 1/use_lvmetad = 0/g' /etc/lvm/lvm.conf
           /etc/init.d/lvm2 start

      elif [[ `lsb_release -cs` == "trusty" ]]; then

           echo "$(date) Installing Trusty packages for lvm2"

           for package in libdevmapper-event1.02.1 watershed lvm2
           do

              # check if package already installed else install, incase package not found
              # using dpkg -s for checking the installation which does not lock the /var/lib/dpkg/lock

              if ! dpkg -s $package > /dev/null 2>&1 ; then
                echo "$(date) Installing debian package $package"
                set -e
                dpkg -i "$(ls -1 $LVM2_PACKAGE_PATH/${package}_*.deb | head -1)"
                set +e
              fi
           done

      elif [[ `lsb_release -cs` == "jammy" ]]; then

           echo "$(date) Installing jammy packages for lvm2"
       
           if ! dpkg -s libdevmapper-event1.02.1 > /dev/null 2>&1 ; then
               echo "$(date) Installing debian package libdevmapper-event1.02.1"
           set -e
               dpkg -i $LVM2_PACKAGE_PATH/libdevmapper-event1.02.1_1.02.145-4.1ubuntu3_amd64.deb
           set +e
           fi
       
           # the  package liblvm2cmd2.03 and dmeventd (package in below if) have cyclic dependency
           # just unpack the packages  and configure them after unpacking both packages
           if ! dpkg -s liblvm2cmd2.03 > /dev/null 2>&1 ; then
               echo "$(date) Installing debian package liblvm2cmd2.03"
           set -e
               dpkg --unpack $LVM2_PACKAGE_PATH/liblvm2cmd2.03_2.03.11-2.1ubuntu4_amd64.deb
           set +e
           fi
       
           if ! dpkg -s dmeventd > /dev/null 2>&1 ; then
               echo "$(date) Installing debian package dmeventd"
           set -e
               dpkg --unpack $LVM2_PACKAGE_PATH/dmeventd_1.02.185-2_amd64.deb
               # Now configure both liblvm2cmd2.03 and dmeventd which have cyclic dependency
               dpkg --configure liblvm2cmd2.03 dmeventd
           set +e
           fi
       
           if ! dpkg -s thin-provisioning-tools > /dev/null 2>&1 ; then
               echo "$(date) Installing debian package liblvm2app2.2"
           set -e
               dpkg -i $LVM2_PACKAGE_PATH/thin-provisioning-tools_0.9.0-2ubuntu1_amd64.deb
           fi
       
           if ! dpkg -s lvm2 > /dev/null 2>&1 ; then
               echo "$(date) Installing debian package lvm2"
           set -e
               dpkg -i $LVM2_PACKAGE_PATH/lvm2_2.03.11-2.1ubuntu4_amd64.deb
           set +e
       
           fi
       
           #lvmetad is new caching mechanism in lvm2, observed few problems with it hence disabling 
           /etc/init.d/lvm2 stop
           sed -i 's/use_lvmetad = 1/use_lvmetad = 0/g' /etc/lvm/lvm.conf
           /etc/init.d/lvm2 start
           
     else
        echo "$(date) Unsupported ubuntu release"
        exit 1
     fi
     set -e

    # To disable lvm archive
    sed -i 's/archive = 1/archive = 0/g' /etc/lvm/lvm.conf

    create_volume
    create_loop

    echo $$ > ${LVMVD_PID_FILE}

    exec /var/vcap/packages/lvmvd/bin/lvmvd \
        --default-size ${LVMVD_DEFAULT_SIZE} \
        --mount-root ${LVMVD_MOUNT_DIR} \
        --volume-group-name ${LVMVD_VOLUME_GROUP_NAME} \
        --sock-file ${LVMVD_SOCKET_FILE} \
        >>${LVMVD_LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${LVMVD_LOG_DIR}/${OUTPUT_LABEL}.stderr.log
    ;;

  stop)
    set +e
    # Stop Swarm Manager daemon
    kill_and_wait ${LVMVD_PID_FILE}
    #delete_loop
    retry_delete_loop

    #kill any process using the mounted volume
    kill -9 $(lsof -t $DOCKER_VOLUME_MOUNTDIR)
    sleep 2s

    set -e
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0

