<%
  def ostruct_to_hash(os)
    os.marshal_dump.map do |key, value|
      { key => value.is_a?(OpenStruct) ? ostruct_to_hash(value) : value }
    end.reduce(&:merge)
  end

  broker_name = p('name')
  log_path = "/var/vcap/sys/log/service-fabrik-broker/service-fabrik-broker.log"
  networks = ostruct_to_hash(spec.networks)
  default_ip = networks.values.find { |net| net.has_key?(:default) }[:ip]
  external = p('external')
  internal = p('internal')
  quotaApp = link("quota_app")
%>---
production:
  ####################
  # GENERAL SETTINGS #
  ####################
  broker_name: '<%= broker_name %>'
  deployment_name: '<%= spec.deployment %>'
  release_name: '<%= spec.release.name %>'
  release_version: '<%= spec.release.version %>'
  username: '<%= p('username') %>'
  password: '<%= p('password') %>'
  enable_service_fabrik_v2: <%= p('enable_service_fabrik_v2') %>
  skip_ssl_validation: <%= p('skip_ssl_validation') %>
  session_store:
    path: "/var/vcap/store/service-fabrik-broker/session"
  log_path: <%= log_path %>
  log_level: <%= p('log_level') %>
  sys_log_level: <%= p('sys_log_level') %>
  enable_bosh_rate_limit: <%= p('enable_bosh_rate_limit') %>
  enable_cross_organization_sharing: <%= p('enable_cross_organization_sharing') %>
  enable_circuit_breaker: <%= p('enable_circuit_breaker') %>
  enable_swarm_manager: <%= p('enable_swarm_manager') %>
  feature:
    ServiceInstanceAutoUpdate: <%= p('feature.ServiceInstanceAutoUpdate') %>
    EnableSecurityGroupsOps: <%= p('feature.EnableSecurityGroupsOps') %>
    AllowInstanceSharing: <%= p('feature.AllowInstanceSharing') %>
  http_timeout: <%= p('http_timeout') %>
  deployment_action_timeout: <%= p('deployment_action_timeout') %>
  agent_operation_timeout: <%= p('agent_operation_timeout') %>
  multi_az_enabled: <%= p('multi_az_enabled') %>
  ha_enabled: <%= p('ha_enabled') %>
  broker_drain_message: <%= p('broker_drain_message') %>
  allowConcurrentOperations: <%= p('allow_concurrent_operations') %>
  allowConcurrentBindingOperations: <%= p('allow_concurrent_binding_operations') %>
  sendBindingMetadata: <%= p('send_binding_metadata') %>

  ##############################
  # EXTERNAL ENDPOINT SETTINGS #
  ##############################
  external:
    log_event: <%= p('external.log_event') %>
    event_type: SF.API_EVENT
    trust_proxy: <%= external['trust_proxy'] %>
    port: <%= external['port'] %>
    <% if_p('external.ssl') do |ssl| %>
    protocol: 'https'
    ssl: <%= JSON.dump(ssl) %>
    <% end.else do %>  
    protocol: 'https'
    <% end %>  
    host: <%= external['host'] %>
    cookie_secret: <%= external['cookie_secret'] %>
    cookie_secure: true
    session_expiry: <%= external['session_expiry'] %>
    api_requires_admin_scope: <%= p('external.api_requires_admin_scope', false) %>

  ##############################
  # INTERNAL ENDPOINT SETTINGS #
  ##############################
  internal:
    log_event: <%= p('internal.log_event') %>
    event_type: SF.BROKER_EVENT
    domain_socket:
      path: <%= p('internal.domain_socket.path') %>
      fwd_events: true
    port: <%= internal['port'] %>
    ip: <%= internal['ip'] %>
    host: <%= "#{internal['ip']}:#{internal['port']}" %>
    <% if_p('internal.ssl') do |ssl| %>
    protocol: 'https'
    ssl: <%= JSON.dump(ssl) %>
    <% end.else do %>
    protocol: 'http'
    <% end %>
  
  ##############################
  # QUOTA APP SETTINGS #
  ##############################
  quota_app:
    username: <%= quotaApp.p('username') %>
    password: <%= quotaApp.p('password') %>
    quota_app_url: <%= "http://#{quotaApp.p('host')}:#{quotaApp.p('port')}" %>
    quota_endpoint: <%= quotaApp.p('endpoint') %>
  
  ##############################
  # ADMIN APP SETTINGS #
  ##############################
  admin_app: 
    log_event: true
    event_type: SF.BROKER_EVENT
    domain_socket:
      path: /tmp/var
      fwd_events: true
    port: <%= link("admin_app").p('port') %>
    protocol: 'https'
    <% if_p('internal.ssl') do |ssl| %>
    ssl: <%= JSON.dump(ssl) %>
    <% end %>
    host: <%= "#{link("admin_app").p('ip')}:#{link("admin_app").p('port')}" %>

  ##############################
  # APISERVER SETTINGS #
  ##############################
  apiserver:
    ip: <%= link("service-fabrik-apiserver").p('ip') %>
    port: <%= link("service-fabrik-apiserver").p('port') %>
    ca: <%= JSON.dump(link("service-fabrik-apiserver").p('tls.apiserver.ca')) %>
    certificate: <%= JSON.dump(link("service-fabrik-apiserver").p('tls.apiserver.certificate')) %>
    private_key: <%= JSON.dump(link("service-fabrik-apiserver").p('tls.apiserver.private_key')) %>
    crds: <%= JSON.dump(link("service-fabrik-apiserver").p('crds')) %>
    getConfigInCluster: false
    pathToKubeConfig: "/var/vcap/jobs/service-fabrik-apiserver/config/kubeconfig"

  #############################
  # DEPLOYMENT HOOKS SETTINGS #
  #############################
  deployment_hooks:
    username: '<%= link("deployment_hooks").p('username') %>'
    password: '<%= link("deployment_hooks").p('password') %>'
    host: <%= "#{link("deployment_hooks").p('hook.ip')}:#{link("deployment_hooks").p('hook.port')}"%>
    protocol: '<%= link("deployment_hooks").p('hook.protocol')%>'

  ######################
  # APISERVER LOCK TTL #
  ######################
  lockttl:
    lifecycle: <%= p('lockttl.lifecycle') %>
    backup: <%= p('lockttl.backup') %>
    restore: <%= p('lockttl.restore') %>

  #######################
  # MONITORING SETTINGS #
  #######################
  monitoring:
    success_state: 'ok'
    success_metric: 0
    failure_state: 'critical'
    failure_metric: 1
    warning_state: 'warning'
    inprogress_state: 'in progress'
    inprogress_metric: 2
    event_name_prefix: <%= p('riemann.prefix') %>.<%= name %>.<%= index %>.<%= spec.deployment %>
    include_response_body: <%= p('monitoring.include_response_body') %>
    events_logged_in_db: <%= p('monitoring.events_logged_in_db') %>
    unauthorized:
      http_status: [401,403]
      event_name: 'unauthorized_access'
      description: 'Unauthorized access to service attempted'
      tags: ['security', 'unauthorized']
      include_response_body: <%= p('monitoring.unauthorized.include_response_body') %>
  riemann:
    enabled: <%= p('riemann.enabled') %>
    host: <%= p('riemann.host') %>
    port: <%= p('riemann.port') %>
    protocol : tcp
    show_errors: <%= p('riemann.show_errors') %>
    prefix: <%= p('riemann.prefix') %>
    log_additional_event: <%= p('riemann.log_additional_event') %>
    http_status_codes_to_be_skipped: <% p('riemann.http_status_codes_to_be_skipped').each do |code| %>
    - <%= code %><% end %>

  ###################
  # QUOTA MANAGEMENT SETTINGS #
  ###################
  quota: <%= JSON.dump(p('quota', nil)) %>
  #####################
  # METERING SETTINGS #
  #####################
  <% if p('metering.enabled') == true %>
  metering:
    client_id: <%= p('metering.binding.clientid') %>
    client_secret: <%= p('metering.binding.clientsecret') %>
    token_url: <%= p('metering.binding.token_url') %>
    metering_url: <%= p('metering.binding.metering_url') %>
    region:  <%= p('metering.binding.region') %>
    error_threshold_hours:  <%= p('metering.error_threshold_hours') %>
  <% end %>

  ###################
  # BACKUP SETTINGS #
  ###################
  backup:
    retention_period_in_days: <%= p('backup.retention_period_in_days') %>
    max_num_on_demand_backup: <%= p('backup.max_num_on_demand_backup') %>
    status_check_every: <%= p('backup.status_check_every') %>
    retry_delay_on_error: <%= p('backup.retry_delay_on_error') %>
    lock_check_delay_on_restart: <%= p('backup.lock_check_delay_on_restart') %>
    backup_restore_status_poller_timeout: <%= p('backup.backup_restore_status_poller_timeout') %>
    backup_restore_status_check_every: <%= p('backup.backup_restore_status_check_every') %>
    abort_time_out: <%= p('backup.abort_time_out') %>
    consecutive_backup_failure_sla_count: <%= p('backup.consecutive_backup_failure_sla_count') %>
    num_of_allowed_restores: <%= p('backup.num_of_allowed_restores') %>
    restore_history_days: <%= p('backup.restore_history_days') %>
    reschedule_backup_delay_after_restore: <%= p('backup.reschedule_backup_delay_after_restore') %>
    transaction_logs_delete_buffer_time: <%= p('backup.transaction_logs_delete_buffer_time') %>
    provider: <%= JSON.dump(p('backup.provider', nil)) %>

  #########################
  # CLOUDFOUNDRY SETTINGS #
  #########################
  cf:
    url: <%= p('cf.url') %>
    username: <%= p('cf.username') %>
    password: <%= p('cf.password') %>
    <% if_p('cf.identity_provider') do |identity_provider| %>
    identity_provider: <%= identity_provider %>
    <% end %>

  service_addon_jobs: <%= p('service_addon_jobs') %>

  #####################
  # DIRECTOR SETTINGS #
  #####################
  directors: <%= JSON.dump(p('directors')) %>
  
  ####################
  # SERVICES CATALOG #
  ####################
  services: <%= JSON.pretty_generate(p('services')) %>
