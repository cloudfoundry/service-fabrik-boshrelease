#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Set Golang dependency
if [ -z "${BOSH_PACKAGES_DIR:-}" ]; then
  export GOROOT=$(readlink -nf /var/vcap/packages/golang)
else
  export GOROOT=$BOSH_PACKAGES_DIR/golang
fi
export GOCACHE=/var/vcap/data/golang/cache
export GOPATH="${PWD}"
export PATH=${GOROOT}/bin:${GOPATH}/bin:${PATH}

# Build Docker Swarm package
echo "Building Docker Swarm..."
PACKAGE_NAME=github.com/docker/swarm
mkdir -p ${BOSH_INSTALL_TARGET}/src/${PACKAGE_NAME}
export GOPATH=${BOSH_INSTALL_TARGET}
export GO111MODULE=off

# Extract Docker Swarm package
SWARM_VERSION=`ls -r docker/swarm* | sed 's/docker\/swarm-\(.*\)\.zip/\1/' | head -1`
echo "Extracting Docker Swarm ${SWARM_VERSION}..."
unzip docker/swarm-${SWARM_VERSION}.zip 
if [[ $? != 0 ]] ; then
  echo "Failed extracting Docker Swarm ${SWARM_VERSION}"
  exit 1
fi

cp -a classicswarm-${SWARM_VERSION}/* ${BOSH_INSTALL_TARGET}/src/${PACKAGE_NAME}
if [[ $? != 0 ]] ; then
  echo "Failed copying Docker Swarm ${SWARM_VERSION}"
  exit 1
fi

go install ${PACKAGE_NAME}

# Clean up src & pkg artifacts
rm -rf ${BOSH_INSTALL_TARGET}/pkg ${BOSH_INSTALL_TARGET}/src
