#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Detect # of CPUs so make jobs can be parallelized
CPUS=`grep -c ^processor /proc/cpuinfo`

# We grab the latest versions that are in the directory
AUFS_TOOLS_VERSION=`ls -r docker/aufs-tools_*.deb | sed 's/docker\/aufs-tools_\(.*\).deb/\1/' | head -1`
AUTOCONF_VERSION=`ls -r docker/autoconf-*.tar.gz | sed 's/docker\/autoconf-\(.*\)\.tar\.gz/\1/' | head -1`
DOCKER_VERSION=`ls -r docker/docker-*.tgz | sed 's/docker\/docker-\(.*\)\.tgz/\1/' | head -1`

# Extract Autoconf package
echo "Extracting Autoconf ${AUTOCONF_VERSION}..."
tar xzvf ${BOSH_COMPILE_TARGET}/docker/autoconf-${AUTOCONF_VERSION}.tar.gz
if [[ $? != 0 ]] ; then
  echo "Failed extracting Autoconf ${AUTOCONF_VERSION}"
  exit 1
fi

# Build Autoconf package
echo "Building Autoconf ${AUTOCONF_VERSION}..."
cd ${BOSH_COMPILE_TARGET}/autoconf-${AUTOCONF_VERSION}
./configure
make -j${CPUS}
make install

# Extract docker package
echo "Extracting docker ${DOCKER_VERSION}..."
tar xzvf ${BOSH_COMPILE_TARGET}/docker/docker-${DOCKER_VERSION}.tgz
if [[ $? != 0 ]] ; then
  echo "Failed extracting docker ${DOCKER_VERSION}"
  exit 1
fi

# Copy docker binaries
echo "Copying docker ${DOCKER_VERSION} binaries..."
mkdir -p ${BOSH_INSTALL_TARGET}/bin
cp docker/* ${BOSH_INSTALL_TARGET}/bin
chmod +x ${BOSH_INSTALL_TARGET}/bin/*

# Install aufs-tool deb package
echo "Copying aufs-tools ${AUFS_TOOLS_VERSION}..."
cp -a ${BOSH_COMPILE_TARGET}/docker/aufs-tools_${AUFS_TOOLS_VERSION}.deb ${BOSH_INSTALL_TARGET}/

